name: BTPC Desktop App CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        node: [18, 20]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy, miri

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node }}
        cache: 'npm'
        cache-dependency-path: package-lock.json

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          src-tauri/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

    - name: Install frontend dependencies
      run: npm ci

    - name: Install Rust audit tool
      run: cargo install cargo-audit --locked

    - name: Security audit
      run: cargo audit --deny warnings
      working-directory: src-tauri

    - name: Format check
      run: cargo fmt --all -- --check
      working-directory: src-tauri

    - name: Lint check
      run: cargo clippy --all-targets --all-features -- -D warnings
      working-directory: src-tauri

    - name: Run unit tests
      run: cargo test --verbose --all-features
      working-directory: src-tauri

    - name: Run integration tests
      run: cargo test --test integration_tests --verbose
      working-directory: src-tauri

    - name: Run benchmarks (nightly only)
      if: matrix.rust == 'beta'
      run: cargo bench --no-run
      working-directory: src-tauri

    - name: Test with Miri (unsafe code validation)
      if: matrix.os == 'ubuntu-latest' && matrix.rust == 'beta'
      run: |
        rustup component add miri
        cargo miri test --target x86_64-unknown-linux-gnu
      working-directory: src-tauri

    - name: Frontend lint check
      run: npm run lint

    - name: Frontend tests
      run: npm test

    - name: Build Tauri application
      run: npm run tauri:build
      env:
        TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-deny
      run: cargo install cargo-deny --locked

    - name: Check dependencies for security issues
      run: cargo deny check
      working-directory: src-tauri

    - name: Install cargo-geiger (unsafe code detector)
      run: cargo install cargo-geiger --locked

    - name: Scan for unsafe code
      run: cargo geiger --output-format GitHubMarkdown
      working-directory: src-tauri

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install criterion dependencies
      run: sudo apt-get install -y gnuplot

    - name: Run benchmarks
      run: cargo bench --bench performance_benchmarks
      working-directory: src-tauri

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: src-tauri/target/criterion/

  build:
    name: Build Release
    runs-on: ${{ matrix.os }}
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

    - name: Install frontend dependencies
      run: npm ci

    - name: Build optimized release
      run: npm run tauri:build
      env:
        TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: btpc-desktop-${{ matrix.os }}
        path: |
          src-tauri/target/release/bundle/
          !src-tauri/target/release/bundle/**/*.deb
          !src-tauri/target/release/bundle/**/*.rpm

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov --locked

    - name: Generate code coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
      working-directory: src-tauri

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: src-tauri/lcov.info
        fail_ci_if_error: true

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version from Cargo.toml
      id: version
      run: |
        VERSION=$(grep "^version" src-tauri/Cargo.toml | head -n1 | cut -d'"' -f2)
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Download build artifacts
      uses: actions/download-artifact@v3

    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        tag: v${{ steps.version.outputs.version }}
        name: BTPC Desktop App v${{ steps.version.outputs.version }}
        draft: false
        prerelease: false
        artifacts: "btpc-desktop-*/**/*"
        generateReleaseNotes: true
        token: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [test, security, performance]
    if: always()
    steps:
    - name: Notify on success
      if: needs.test.result == 'success' && needs.security.result == 'success'
      run: |
        echo "✅ All checks passed for BTPC Desktop App"
        echo "- Tests: ${{ needs.test.result }}"
        echo "- Security: ${{ needs.security.result }}"
        echo "- Performance: ${{ needs.performance.result }}"

    - name: Notify on failure
      if: needs.test.result == 'failure' || needs.security.result == 'failure'
      run: |
        echo "❌ BTPC Desktop App checks failed"
        echo "- Tests: ${{ needs.test.result }}"
        echo "- Security: ${{ needs.security.result }}"
        echo "- Performance: ${{ needs.performance.result }}"
        exit 1